Technology Stack:

Backend Framework: Use NestJS, a powerful Node.js framework with TypeScript support, for building the backend of your e-commerce app. NestJS offers a modular and scalable architecture, making it well-suited for complex applications.
Database: Employ PostgreSQL, a robust and reliable relational database, to store product data, user information, and other relevant information. PostgreSQL is known for its advanced features, performance, and data integrity.
ORM: Implement TypeORM, a popular Object-Relational Mapping library, to handle database interactions and simplify data modeling. TypeORM allows you to define entities as TypeScript classes, making it easy to work with the database using familiar object-oriented programming concepts.
Frontend Framework:

Choose from React, Angular, or Vue.js to build the frontend of your e-commerce app. Each framework offers a rich ecosystem, and you can select the one that aligns with your development preferences and team expertise.
Elasticsearch Integration:

Integrate Elasticsearch into your app to handle advanced attribute-based search and indexing. Elasticsearch is a powerful search engine that enables fast and efficient full-text search and complex filtering capabilities. It's an excellent choice for optimizing search performance and user experience.
Redis Integration (Optional):

Consider using Redis for caching frequently accessed data, which can improve the performance and responsiveness of your app. Redis is an in-memory data store that allows you to store and retrieve data quickly, making it useful for caching, session management, and other use cases.
Admin Page for Attribute Settings:

Create an admin page in your frontend to allow administrators to define settings for each attribute. This page will enable users to set attributes for use in filtering, sorting, reporting, and other functionalities throughout the app.
Additional Considerations:

Implement authentication and authorization to ensure secure access to the admin page and other protected areas of your app.
Design a data synchronization mechanism between PostgreSQL and Elasticsearch to keep attribute data up-to-date in real-time.
Thoroughly test your app's functionality, including attribute management, search, and other features, to ensure a smooth user experience.
In summary, your e-commerce app will utilize NestJS and PostgreSQL for the backend, with TypeORM as the ORM for database interactions. The frontend can be built with React, Angular, or Vue.js. Elasticsearch will enhance search capabilities, and Redis can be optionally integrated for caching. The admin page will allow attribute settings customization, and additional considerations include authentication, data synchronization, and testing.

If you have any specific questions or need further clarification on any aspect of the app development, please feel free to ask!