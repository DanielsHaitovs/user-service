import { PaginatedResponseDto } from '@/base/dto/pagination.dto';
import { EXAMPLE_USER_ID } from '@/lib/const/user.const';
import { RoleResponseDto } from '@/role/dto/role.dto';
import { ApiProperty } from '@nestjs/swagger';

import { Type } from 'class-transformer';
import { IsDate, IsNotEmpty, IsUUID, ValidateNested } from 'class-validator';
import { UUID } from 'crypto';

export class CreateUserRoleDto {
  @ApiProperty({
    type: String,
    required: true,
    description: 'User ID to assign roles to',
  })
  @IsUUID(4)
  @IsNotEmpty()
  userId: string;

  @ApiProperty({
    type: String,
    required: true,
    isArray: true,
    description: 'List of role IDs to assign to the user',
  })
  @IsUUID(4, { each: true })
  @IsNotEmpty()
  roleIds: string[];

  @ApiProperty({
    type: String,
    format: 'uuid',
    description: 'ID of the user who assigned the roles',
    example: EXAMPLE_USER_ID,
    required: true,
  })
  @IsUUID(4)
  @IsNotEmpty()
  assignedById: string;

  constructor(userId: string, roleIds: string[], assignedById: string) {
    this.userId = userId;
    this.roleIds = roleIds;
    this.assignedById = assignedById;
  }
}

/**
 * Complete user role data DTO for API responses including system-generated fields.
 * Extends UserRoleBaseDto with read-only fields like ID, account status, and security tokens
 */
export class UserRoleResponseDto {
  @ApiProperty({
    description: 'Unique user identifier generated by the system',
    example: EXAMPLE_USER_ID,
    format: 'uuid',
    type: String,
    readOnly: true,
  })
  @IsUUID()
  id: UUID;

  @ApiProperty({
    title: 'Roles',
    description: 'List of roles assigned to the user',
    type: RoleResponseDto,
    isArray: true,
  })
  @Type(() => RoleResponseDto)
  @ValidateNested()
  role: RoleResponseDto;

  // @ApiProperty({
  //   title: 'User details',
  //   description: 'Details of the user associated with this role',
  //   isArray: true,
  //   // type: UserResponseDto,
  // })
  // @Type(() => UserDto)
  // @ValidateNested()
  // user: UserDto;

  // @ApiProperty({
  //   title: 'Assigned By User',
  //   description: 'Details of the user who assigned this role',
  //   example: EXAMPLE_USER_ID,
  //   format: 'uuid',
  //   // type: UserResponseDto,
  //   required: true,
  // })
  // @Type(() => UserResponseDto)
  // @ValidateNested()
  // assignedBy: UserResponseDto;

  @ApiProperty({
    description: 'Date when the user account was created',
    example: '2023-01-01T12:00:00.000Z',
    format: 'date-time',
    type: Date,
  })
  @IsDate()
  createdAt: Date;

  @ApiProperty({
    description: 'Date when the user account was last updated',
    example: '2023-01-02T12:00:00.000Z',
    format: 'date-time',
    type: Date,
  })
  @IsDate()
  updatedAt: Date;

  constructor(
    id: UUID,
    // user: UserDto,
    // assignedBy: UserResponseDto,
    createdAt: Date,
    updatedAt: Date,
    role: RoleResponseDto,
  ) {
    this.id = id;
    // this.user = user;
    // this.assignedBy = assignedBy;
    this.role = role;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
  }
}

/**
 * Paginated response wrapper for user list endpoints.
 * Extends base pagination with strongly-typed user array validation.
 */
export class UserRoleListResponseDto extends PaginatedResponseDto {
  @ApiProperty({
    description: 'Array of user objects matching the query criteria',
    type: UserRoleResponseDto,
    isArray: true,
  })
  @Type(() => UserRoleResponseDto)
  @ValidateNested({ each: true })
  userRoles: UserRoleResponseDto[];

  constructor(
    total: number,
    page: number,
    limit: number,
    totalPages: number,
    userRoles: UserRoleResponseDto[],
  ) {
    super(total, page, limit, totalPages);
    this.userRoles = userRoles;
  }
}
